== ZNACZĄCE NAZWY ==

-	Jedno słowo na jedno abstracyjne pojęcie
	nie używać naprzemiennie np. `fetch` `get` `retrieve`

-	Nie używać tego samego pojęcia dla różnych zagadnień
	składowa nazwy funkcji powinna pokrywać się z inną jedynie
	jeżeli ich implementacje są takie same

==	FUNKCJE ==

-	MAŁE FUNKCJE
	Funkcje powinny być jak najmniejsze. Powinny być *mniejsze niż są*.

-	JEDEN POZIOM ABSTRAKCJI
	W funkcjach nie powinno być więcej niż jednego poziomu abstrakcji.
	Jeżeli funkcja zawiera więcej niż dwa wcięcia to prawdopodobnie
	da się z niej wydzielić metodę pomocniczą.

-	JEDNA RZECZ 
	Funkcja powinna wykonywać JEDNĄ RZECZ i robić to dobrze

-	KOD PISANY OD GÓRY DO DOŁU
	Kod powinien być pisany od góry do dołu
	Kolejne funkcje i kolejne poziomy abstrakcji powinny po sobie postępować
	od góry do dołu

-	SWITCH i łańcuchy IF-ELSE
	Należy w miare możliwości umieszczać je np. w abstrakcyjnych fabrykach
	bo sama w sobie może naruszać SRP oraz OCP

-	JAK NAJBARDZIEJ OPISOWE NAZWY
	Należy stosować jak najbardziej opisowe nazwy funkcji które
	dokładnie opiszą co dana funkcja robi i co się wewnątrz niej dzieje.

-	JAK NAJMNIEJ ARGUMENTÓW
	Jak najmniej argumentów w funkcji. Idealnie 0, dobrze 1, niedobrze 2,
	3 i więcej wymagają bardzo konkretnego uzasadnienia.
	Im więcej argumetnów tym trudniej testować i trudniej jest zrozumieć
	funkcję osobie ją czytającą.

-	ZWRACANIE WARTOŚCI NIE ARGUMENTÓW
	Należy unikać funkcji jednoargumentowych które zamiast zwracać wartość
	używają argumentów wyjściowych modyfikując w trakcie przebiegu
	argument wejściowy. Zamiast zwracać void i modyfikowac obiekt przekazany
	do funkcji lepiej jest zmodyfikować taki obiekt i zwrócić go.

-	ARGUMENTY ZNACZNIKOWE
	Należy unikać argumetnów znacznikowych w funkcjach - często zaciemniają
	obraz funkcji i dają do zrozumienia ze dana funkcja nie spełnia SPR:
	inne polecenia wykonywane są dla `true` i inne dla `false`. 
	Lepiej jest zrobić dwie różne funkcje.

-	ZAMIANA ARGUMENTÓW NA OBIEKTY
	Jeżeli do funkcji musimy przekazać więcej argumentów niż 2,3 to warto
	spróbować sensownie opakować częśc tych arugmentów w nową klasę.

-	ARGUMENTY W NAZWIE FUNKCJI
	Czasami umieszczanie argumentów w nazwie funkcji
	może poprawić jej czytelność, np:
		assertEquals(expected, actual);
		assertExpectedEqualsActual(expected,actual);
	
-	WYODRĘBNIANIE TRY-CATH
	Bloki `try-catch` naruszają strukturę kodu i mieszają przetwarzanie
	błędów ze zwykłym przetwarzaniem. Dlatego zawartość bloków `try` i `catch`
	dobrze jest wyodrębnić do oddzielnych funkcji

-	OBSŁUGA BŁĘDÓW JEDNĄ OPERACJĄ
	Funkcja powinna robić tylko jedną rzecz - jeżeli jest to obsługa błędów
	to funkcja powinna robić tylko to a resztę logii oddelegować do funkcji
	z niej wywoływanych 

==	KOMENTARZE ==

-	Zamiast pisać komentarze lepiej to samo wyrazić w kodzie.
	Komentarze są problematyczne bo mogą się szybko zdezaktualizować,
	mogą, po refaktoringu kodu, być na złym miejscu itp. 

-	Dobry kod sam wyjaśnia to co robi bez potrzeby komentowania.

-	WYJĄTKI:

	-	Komentarze wyjaśniające podejątą decyzję
		Czego często nie da się wyrazić kodem

	-	Komentarze ostrzegawcze
		np. że dany test zajmuje dużo czasu

	-	Komentarze TO-DO
		Notatki "do zrobienia" - możemy oznaczyć np prośby do innych 
		programistów pracujących na tym kodzie, opisać dlaczego
		funkcja ma zdegenerowaną logikę itd. 
		NIE SĄ wymówką do pozostawienia złego kodu w programie

-	Szum informacyjny
	Komentarze opisujace rzeczy oczywiste

-	Komentarze przy klamrach zamykających mogą sprawdzić się w długich
	dużych funkcjach (których i tak należy unikać) ale w małych
	zaciemniają tylko czytanie kodu

-	Dopiski w stylu 
	 // Arek to dodał
	Powinny być załatwiane przez VCS a nie komentarze

-	Dead code
	Komentowanie nie używanego kodu wprowadza tylko konfuzję,
	osoba czytająca taki kod nie wie czy został on zakomentowany
	tymczasowo, czy jest wazny, czy to jakiś zupełny staroć 
	do usunięcia.
	W czasach tak rozwiniętych VCS nie ma już potrzeby zostawnia
	zakomentowanego, martwego kodu.

-	Nie pisać komentarzy wymagających dodatkowych objaśnień
	Jeżeli już musimy pisać komentarz upewnijmy się że jest on tak
	self-contained jak się tylko da i wyjaśnijmy w nim
	wszystkie elementy mogące budzić wątpliwości

==	OBIEKTY I STRUKTURY DANYCH	==

-	Nie należy na ślepo dodawać getterów i setterów,
	lepiej dodać abstakcję pozwaljacą na manipulację *istotą* danych

-	PRAWO DEMETER
	Nie należy pisać kodu który pozwala na tworzenie "pociągów" wywołan metod, np:
		A().B().C();
	Należy w miarę mozliwości zrefaktorować to tak, żeby B() posiadało abstrakcję
	umożliwiającą A() bezpośredni dostęp do tego czego potrzebuje w C()
	Należy tego prawa używac z rozwagą gdyż może powodować znaczny rozrost klasy B()
	o metody będace jedynie kanałem przesyłu danych z C().

-	STRUKTURY DANYCH VS OBIEKTY
	Struktury danych to klasy zawierające jedynie dane, nie posiadające logiki do ich obsługi.
	Kiedy używamy struktur danych najczęściej używamy programowania proceduralnego,
	czyli wywoływania procedur na tych strukturach, zamiast metod w nich zawartych.

	Obiekty posiadają pola prywatne, udsostępniając publicznie abstrakcje do manipulacji nimi.

==	OBSŁUGA BŁĘDÓW	==	

-	WYJĄTKI KONTROLOWANE
	Lipa, bo jeżeli np zdefiniujemy funkcję niskiego poziomu która rzuca wyjątek
	ale nie możemy tego wyjątku obsłużyć na jej poziomie to siłą rzeczy
	musimy ten wyjątek przekazywać do góry, do funkcji wyższego poziomu,
	aż będziemy mogli go obsłużyć. 
	Powoduje to naruszenie zasady Open-Closed	

-	OBSŁUGA WIELU BŁĘDÓW
	Jeżeli chcemy obsłużyc wiele błędów, które może rzucić jakaś metoda
	warto stworzyć klasę opakowującą, która będzie zbierała te błędy w jednym,
	customowym typie wyjątku, np:
		class PortOpener {
			private Port port = new Port();

			try {
				port.open();
			} catch (PortExceptionType1 e){
				logger.log(e.getMessage());
			} catch (PortExceptionTyp2 e){
				logget.log(e.getMessage));
			}
		}
	// Można zamienić na:
		class LocalPortException extends RuntimeException {
			public LocalPortException(Throwable cause) {
				super(cause);
			}
		}

		class LocalPort {
			private Port localPort = new Port();

			public void open() {
				try {
					localPort.open();
				} catch (PortExceptionType1 e) {
					throw new LocalPortException(e);
				} catch (PortExceptionType2 e) {
					throw new LocalPortException(e);
				}
			}
		}

		class PortOpener() {
			private LocalPort localPort =  new LocalPort();

			public void open() {
				try {
					localPort.open();
				} catch (LocalPortException e) {
					logger.log(e.getMessage, e);
				}
			}
		}

-	Powinno się dążyć do całkowitego rozdzielenia obsługi błędów
	i logiki biznesowej

-	NIE ZWRACAMY NULLI
	Zwracanie nulli z metod prosi się tylko o NullPointer.
	Zamiast zwracać null lepiej zwrócić np. pustą listę, -1,
	stworzyć jakiś wrapper, a najlepiej to użyć Optionala!

-	NIE PRZEKAZUJEMY NULLI
	Nie istnieje dobry sposób obsługi nulli przekazywanych do metod.
	Najbezpieczniejszym sposobem jest pisać metody tak, aby
	nie było przypadku w którym jako argument zostanie przekazany null.
	Jeżeli już musimy dopuścić możliwośc przekazania nulla do metody
	powinno się napsiać oddzielną metodę

==	GRANICE - ŁĄCZENIE NASZEGO KODU Z KODEM INNYCH OSÓB ==

-	Przy użyciu interfejsów granicznych, takich jak Map lub List
	należy unikać przekazywania ich samych w obrębie systemu, 
	a raczej włożyć je w jakieś wrappery, żeby użytkownik
	nie miał bezpośredniego dostępu np. do metod czyszczących kolekcję
	lub usuwających z niej dane

-	TESTY UCZĄCE
	Testy które piszemy aby uczyć się nowego API, sprawdzić czy działa
	zgodnie z naszymi oczekiwaniami. Zamiast uczyć się tego API na kodzie
	produkcyjnym, lepiej napisać serię testów, żeby upewnić się że rozumiemy
	jak dane API funkcjonuje.
	
-	KORZYSTANIE Z NIEISTNIEJĄCEGO KODU
	Jeżeli będziemy korzystać z API, którego jeszcze nie ma, albo którego
	jescze nie znamy, warto stworzyć interfejs który będzie zawierał 
	oczekiwane abstrakcje do komunikacji z API. Potem, gdy już otrzymamy
	API tworzymy adapter między naszym interfejsem, a API - dzięki temu
	uzyskujemy wygodny, jeden punkt połączenia naszego kodu z kodem zewnętrznym,
	co pomaga przy aktualizacji programu po ewentualnych zmianach API.

-	CZYSTE GRANICE
	Powinno się unikać sytuacji gdy nadmiernie dużo naszego kodu
	polega na szczegółach określonyc w kodzie zewnętrznym. 
	Można hermetyzować kod używając wrapperów, tworząc dodatkowe interfejsy,
	co zapewni spójność stylu i nazewnictwa w naszym kodzie i na granicach
	i zmniejszy ilość miejsc konserwacji kodu w razie wystąpienia błędu.

==	TESTY JEDNOSTKOWE	==


-	TRZY PRAWA TDD:
	1.	Nie piszemy kodu produkcyjnego bez wcześniejszego stworzenia 
		niespełnianego testu jednostkowego.
	2.	Nie można napisać więcej testów jednostkowych po niespełnieniu
		testu, a brak kompilacji uznaje się za niespełnienie testu.
	3.	Nie można pisać więcej kodu produkcyjnego niż jest wymagane
		do spełnienia napisanego testu.
	

-	Czysty kod testów
	Kod testów podlega takim samym zasadom czystości co kod produkcyjny
	nie wolno odpuszczać sobie pisania wysokiej czystości kodu
	tylko dlatego że piszemy testy

-	Wydajność testów
	Mimo że kod testów musi być takiej samej czystości co kod produkcyjny
	możemy pozwolić sobie na zluzowanie jeżeli chodzi o wydajność,
	bo testy uruchamiane są na środowisku testowym, nie produkcyjnym

-	Jedna koncepcja na test
	Dobrą praktyką jest próbowanie ograniczenia asercji w obrębie
	jednego testu do jednej, ale jest to bardziej wskazówka
	niż reguła. Regułą jest natomiast obsługiwanie tylko jednej 
	koncepcji w jednym teście. Nie testujemy wielu przypadków
	w obrębie jednej metody testowej.

-	F.I.R.S.T.
	*	Fast
	*	Independent
	*	Repeatable
	*	Self-Validating
		Test powinien mieć jeden parametr wyjściowy typu logicznego,
		test może się udać, lub nie. Nie powinniśmy musieć przeglądać
		logów żeby dowiedzieć się czy test się udał czy nie
	*	Timely

==	KLASY	==

-	Kolejność elementów
	Klasy zaczynamy od list zmiennych - najpierw publiczne statyczne,
	potem prywatne statyczne a potem prywatne instancyjne.
	Potem lądują metody publiczne a potem prywatne 

-	Rozmiar
	Klasy powinny być małe - jak najmniejsze - ale w przypadku klas,
	w przeciwieństwie do funkcji, nie patrzymy na ilość wierszy,
	ale na ilość *odpowiedzialności*. Najczęściej jeżeli nie możemy 
	opisać czym zajmuje się klasa bez użycia słów "lub" "oraz" "ale" "jeżeli"
	to znaczy że klasa ma zbyt dużo odpowiedzialności i powinna
	zostać zrefaktorowana.
	Podobnie jeżeli nie możemy wymyślić prostej, nieogólnej 
	nazwy klasy - prawdopodobnie ma ona zbyt wiele odpowiedzialności.

-	Single Responsibility Principle
	Super ważna zasada i podwalina OOP. Klasa musi mieć tylko jeden
	powód do zmiany - jedną odpowiedzialność. Nie powinniśmy się bać
	tworzyć serii małych, jednoodpowiedzialnościowych klas, zamiast
	kilku dużych.

-	Spójność
	Klasa powinna zawierac możliwie mało zmiennych instancyjnych.
	W idealnej klasia każda metoda wykorzystywałaby każdą zmienną
	instancyjną, ale nie jest zalecane dążenie do tego za cenę
	innych reguł czystego kodu.
	Jeżeli zauważymy że jakaś zmienna wykorzystywana jest
	jedynie przez konkretny podzbiór metod, jest to jasny
	znak że z naszej klasy chce się wydzielić nowa klasa.

-	Podział na mniejsze przez spójność
	Jeżeli chcemy zwiększyśc spójność i czystość kodu
	i zaczynamy np wydzielać nowe metody z istniejących
	możemy trafić na moment kiedy nowa metoda ma np.
	4 argumenty.
	W takim wypadku lepiej jest te zmienne zaimplementować
	jako instancyjne, ale wtedy klasa zaczyna mieć
	dużo zmiennych używanych jedynie przez grupy metod.
	Jest to ewiedntnym znakiem, że konieczne jest
	wydzielenie nowej klasy. Pozwala to na lepszą organizację 
	kodu i zapewnienie bardziej przejrzystej struktury
	programu.


==	SYSTEMY	==

-	Oddzielenie konstrukcji systemu od jego użytkowania
	"Systemy oprogramowania powinny oddzielić proces uruchamiania,
	w którym sa budowane obiekty i łączone ze sobą zależności,
	od logiki działania, która jest wykorzystywana po uruchomieniu"

	Dobrą praktyką jest wydzielnie do `main` fragmentów kodu
	odpowiedzialnych za budowę elementów aplikacji i przekazywanie
	ich w głąb do fragmentów funkcjonalnych. Tym samym następuje
	rozdzielenie logiki budowania aplikacji od jej uruchamiania.

-	Fabryki
	Kolejny spsób na ten rozdział to użycie wzorca fabryki abstrakcyjnej.
	Aplikacja jest wtedy optymalnie rozdzielona od logiki tworzenia
	obiektu.

-	Dependency Injection i Inversion of Control
	?? DOCZYTAĆ ??

-	Aspect Oriented Programming
	?? DOCZYTAĆ	??
	Advice - okresla *co* ma być wykonane
	PointCut - określa *kiedy* (when)
		@EnableAspectJAutoProxy
		@Component 
		@Aspect //nad klasą
		@Before("execution(public void foo())) //nad advice (metodą,
											   //która ma być wykonana

	?????????????????

==	POWSTAWANIE PROJEKTU	==

-	Cztery zasady tworzenia projektu:
	1.	Przechodzi wszystkie testy
	2.	Nie zawiera powtórzeń
	3.	Wyraża intencje programisty
	4.	Minimalizuje liczbę klas i metod


-	Cały czas *najważniejsze* jest żeby kod był obstestowany
	i przechodził te wszyskie testy. 

-	Brak powtórzeń
	Powtórzenia to nie tylko takie same linijki kodu,
	ale przede wszystkim takie same implementacje.
	W takim wypadku trzeba zacząć refaktorować 
	i wyciągąć nowe metody z istniejącego kodu 
	posługuąc się zasadą Spójności i SRP.
	powtórzenia można zredukować również używając
	interfejsów i dziedziczenia klas abstrakcyjnych
	lub zwykłych

