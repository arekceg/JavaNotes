=================================
1.	Czy można przekazywać Optional w argumentach metody?
	Nie powinno się. Używanie tak Optionali zaciemnia zapis metody,
	sprawia że działanie metody zależy od wartości optionala,
	optional w porównaniu do nullowalnych argumentów jest bardziej kosztowny,
	Optional może reprezentować aż trzy różne stany: null, non-null ale isPresent = false,??
	oraz non-null opakowujący właściwą wartość.

2.	Skoro nie to jak można obsłużyć zmienną która może być nullem?
	Najbardziej eleganckim rozwiązaniem jest stworzenie overloadowanej metody
	obsługującej wariant logiki z argumentem null.

3.	Jaka lista jeżeli chcę dodawać dane zawsze na początku?
	Klasa LinkedList posiada w sobie metody `addFirst()` oraz `addLast()` 

4.	Co to jest LinkedList?
	Podwójnie łączona lista danych - każdy jej node przechowuje informacje
	o swojej zawartości, jak i odnośniki do node przed i za nim.

5.	Co wprowadziła Java 8?
	- 	Streamy
	- 	Wyrażenia lambda
	- 	Interfejsy funkcyjne
	-	Try-with-resources
	-	Optionale
	-	Typy generyczne

6.	Trzy interfejsy funkcyjne i opisać je
	- Function: przyjmuje jeden argument i zwraca jeden argument
	-	Customer: przyjmuje jeden argument i nie zwraca nic
	-	Predicate: przyjmuje jeden argument i wywołuje na nim test logiczny

7.	Map vs flatMap w Streamach
	-	Map służy do mapowania wartości w streamie na inne wartości przy użyciu
		interfejsu funkcyjnego Function
	-	flatMap używamy w momencie kiedy musimy "spłaszczyć" rezultat działania,
		tzn: jeżeli mamy np. nested stream, kolekcję lub optional 
		Optional.of(Optional.of(foo)) lub List<List<String>> 
		to używając flatMap możemy to spłaszczyć do Optional.of(foo) i List<String>

8.	Jak sprawić żeby obiekt był Immutable?
	-	Ustawić pola jako `private final`
	-	Gettery zwracające nie bezpośrednią referncję do obiektu, ale jego kopię (klon)
	-	Ustawić klase jako `final`
	-	Nie tworzyć setterów do pól
	-	Inicjalizacja pól z argumentów konstruktora powinna odbywać się
		przez deep copy tych arugmentów na pola

9.	Jak przekazać do obiektu immutable przez konstruktor np. mapę?
	Aby wypełnić immutable pole taką mapą należy jej zawartość skopiować do tego pola
	(deep copy)

10.	Jak działa HashMapa?
	-	HashMapa przy inicjalizacji tworzy serię pustych bucketów (domyślnie 16),
		z których każdy może mieć jeden lub więcej nodów połączonych jak LinkedList.
	-	Przy dodawaniu elementu HashMap oblicza hashCode klucza i potem używając
			`index = hash & (n-1)`
			gdzie `n` to ilość bucketów
		(klucz `null` wyląduje w bucket 0)
		ustala index bucketa, do którego wrzuci dany obiekt.
	-	Każdy node będzie zawierał: 
		- key
		- hashcode
		- value
		- next //referencja do następnego node

11.	a) Czy można dodać do HashMapy dwa klucze o tym samym hashu?
	b) Czy możemy zmienić hashcode już istniejącego w mapie obiektu?
	c) Co się wtedy stanie?
	ad a) 	Można dodać, trafią wtedy do tego samego bucketa i połączą się w LinkedList.
	ab b,c)	Możemy, ale nie powinno się tego robić, bo psuje to mapę i obiekt o zmienionym
			hashcode nie będzie już dostępny. Najlepiej jeżeli obiekty używane jako klucze
			będą immutable.

12.	Jak definiujemy beany w Springu? Jaki jest ich domyślny scope?
		a) w pliku XML
		b) od Spring 2.5 - annotacje 
						Annotacje są rozpatrywane przed XMLem, więc XML je nadpisze
		c) Java-Based: zrobienie klasy @Configuration i w niej definiowanie metod
						@Bean które zwracają beany danej klasy
		Domyślny Scope beanów to Singleton. Ale nie jest to taki singleton jak zwykły singleton.
		Scope Singleton oznacza tyle że zawsze kiedy wywołamy beana o id X
		to dostaniemy ten sam obiekt, a nie nowy. 
		Jeżeli chcielibyśmy dostawać nowy obiekt to od tego jest Scope Prototype.

13.	Dlaczego powstał SpringBoot?
				Spring Boot automatyzuje i ułatwia konfigurowanie potrzebnych elementów 
				np. do stworzenia Web Serwisu (konfiguracja kontekstu servletów) czy Spring Data
				(konfiguracja entity managera, transaction managera itd)
		
14.	Różnica między Post a Put, czy Putem możemy umiesczać nowe dane na serwerze?
				Super artykuły o tym:
				https://codecouple.pl/2017/06/09/15-spring-boot-post-put-czy-patch/	
				https://stackoverflow.com/questions/630453/put-vs-post-in-rest

				- POST: używany do tworzenia nowego zasobu kiedy jego np ID nie jest jeszcze znane
												id będzie przydzielone przez serwer w czasie tworzenia obiektu.
												** Po utworzeniu obiektu należy zwrócić kod 201 “Created”. **
				- PUT: może być używany i do tworzenia i aktualizowania danych na serwerze,
												kiedy ID obiektu jest już znane i można je przekazać w parametrach requestu
												** Po aktualizacji należy zwróć kod 204 “No content”. **
				- PATCH: używany do updejtowania tylko części obiektu którego ID jest znane
												** Po aktualizacji należy zwróć kod 204 “No content”. **

15.	Annotacje @Controller, @Repository, @Service - co oznaczają pod maską?
				@Controller:		oprócz zwykłego @Component sprawia też że DispatchServlet będzie uwzględniał
																		tę klasę kiedy będzie szukał klas z @RequestMapping	
				@Repository:		zapewnia obłusługę platform-dependent błędów i tłumaczenie ich na 
																		ogólne błędy springowe
				@Service:					nie nie robi na razie

16.	Obsługa wyjątków w Springu
				W Springu można przechwytywać dowolne wyjątki i obrabiać/opakowywać je przed rzuceniem.
				-	Trzeba zrobić klasę z annotacją 
										@ControllerAdvice lub @RestControllerAdvice (ControllerAdvice + ResponseBody)
								która będzie przechowywała nasze ExceptionHandlery (może być kilka tych klas ofc)
				-	W tej klasie robimy metody na obsługi róznych wyjątków
								np jeżeli chcemy obsłużyć wyjątek FooException

										@ExceptionHandler(FooException.class)
										public ReponseEntity<> handleException(FooException exception){
												// tutaj można dołożyć 
												return new ResponseEntity<>(exception, HttpStatus.BAD_REQUEST)
										}
										//lub zdefiniować HttpStatus już w annotacji
										@ExceptionHandler(FooException.class)
										@ResponseStatus(value = HttpStatus.BAD_REQUEST)
										public ErrorMessage handleException(FooException exception){
												Bar objectToReturn = new Bar(...);
												return objectToReturn; // ten obiekt zostanie zserializowany
																								           // i wysłany JSONEM
										}

				- Jak stworzymy swoje własne wyjątki które mają np knokretne informacje które
								chcemy zwrócić to można je własnie w ten sposób obsłużyć
				- Taki handler nam wtedy zapewnia złapanie wyjątku, obrobienie go i zwrócenie
						wraz z HttpStatus w odpowiednim ResponseEntity

16a. Co to jest @ControlerAdvice
						
17.	Optimistic vs Pesimistic locking w Hibernate
				-	Pessimistic:	aplikacja zamyka dostęp do bazy danych oprócz danej transakcji
										bezpieczniejsze niż optimistic, ale aplikacja musi być odpowiednio
										zaprojketowana żeby z niego korzystać
				-	Optimistic:		wiele transakcji ma dostęp do bazy danych. przed updatem
										transakcja sprawdza czy versionNo i timeStamp są takie same
										jak te odczytane przy połączeniu. jeżeli nie to wie że dane 
										sa skażone i anulują tę transakcję

18.	Kiedy Hibernate rzuca LazyInitializationException
				- Kiedy próbuje się pobrać leniwie inicjalizyowaną część encji bez aktywnego 
						kontekstu sesji
				- FetchType.EAGER - ZŁE ROZWIĄZANIE, powoduje n+1
				-- JOIN FETCH - dobre rozwiązanie
						pod maską Hibernate zrobi JOIN który zbierze wszystkie
						potrzebne dane w jednym zapytaniu np
								"SELECT a FROM Author a  JOIN FETCH a.books"
				-	Można zrobić LEFT JOIN żeby zwróciło tez Autorów bez książek
				-- DTO Projection - dobre rozwiązanie
				-	Zamiast pobierać całą encję np books może potrzebujemy tylko tytułu książek?
				- Zrobić DTO któro będzie zawierało potrzebne dane i tylko je generować np
						"select new " +
        "   PostCommentDTO(" +
        "       pc.id, pc.review, p.title" +
        "   ) " +
        "from PostComment pc " +
        "join pc.post p " +
        "where pc.review = :review", PostCommentDTO.class)
						i teraz zamiast całej encji post bierzemy tylko jej tytuł
				

19.	Kiedy używać indeksowania baz danych
				- Implementowane żeby szybciej przesukiwać bazy danych. Zamiast przeszukiwać cała tabelę
					 od początku indeksowanie pozwala pogrupować dane tak, że wyszukiwanie przebiega znacznie szybciej.
				- Minusem jest to że wtedy dodawanie danych trwa dłużej bo każda nowa instancja encji musi zostąć
					 zindeksowana w trakcie dodawania do bazy danych.
				- 	Tworzenie:
					 	CREATE INDEX index_name
					 	ON table_name (column1, columnt2, ...);

21.	Jakie kody komunkatów HTTP znasz
				https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
				--1xx
							kody informacyjne
								-	100 Continue: kontynuuj zapytanie lub zignoruj kod jeżeli zapytanie się wykonało
								- 102 Processing: server przyjął zapytanie ale jeszcze je przetwarza
				--2xx
							kody ok
								-	200 OK: wszystko git. W zależności od rodzaju zapytania:
										GET: żądany obiekt znajduje się w ciele odpowiedzi
										HEAD: headery znajdują się w ciele odpowiedzi
										POST/PUT: W ciele odpowiedzi znajduje sie zasób opisujący rezulat (np. ID obiekt)
								- 201 Created: udało się stworzyć obiekt, POST/PUT
								- 204 No Content: nie ma co zwrócić ale udało się stworzyć/zmodyfikować obiekt
										Content przy PUT
				--3xx
							kody dotyczące przekierowań
								-	300 multiple choice: jest więcej niż jeden respons do danego requesta
										można przekazać w odpowiedzi linki do możliwych rezultatów
								-	301 moved permanently: resource został przeniesiony na stałe, w responsie
										zwrócić poprawny adres
								-	302 found: resource przeniesiony TYMCZASOWO
				--4xx
						 błędy klienta
								-	400 bad request: server nie zrozumiał requestu ze względu na błędy w syntaxie
								-	401 unauthorized: unauthenticated bardziej - user musi się autentyczyć
										żeby przetworzyć request. Server nie rozumie kim jest user
								- 403 forbidden: user nie ma dostępu do danego kontentu, ale server
										wie kim jest user
								-	404 not found:		KLASYK url jest nierozpoznany przez serwero
								- 405 method not allowed - czasami server nie dopuszcza np usuwania 
										ale GET i HEAD muszą być allowed zawsze
								-	408 server timeout - jasne
				--5xx
						błędy servera
								- 500 internal server error: serwer napotkał problem i nie wie zabardzo ocb
								-	501 Not Implemented: danej metody nie zaimplementowano, zawsze 
										musi być zaimplementowane GET i HEAD
								- 502 Bad Gateway: serwer pośredni, działający jako serwer proxy, 
										nie był w stanie uzyskać prawidłowej odpowiedzi z serwera nadrzędnego 
										lub w ogóle nie uzyskał odpowiedzi na swoje żądanie.
								-	503 Service Unavailable: serwer nie jest gotowy na request, na przykład
										ma maintenance lub jest przeciążony
								-	504	Gateway Timeout: serwer pośredni nie odpowiedział w czas

22. Czym różnią się kody 400 od kodów 500?
		400 - najczęściej wynikają z błędów clienta
		500 - najczęsciej wynikają z błędów serwera

23. Co oznacza S w skrócie SOLID
		Single Responsibility Principle
		Klasa powinna miec tylko jedną odpowiedzialność
				"A class should only have one reason to change"
  https://blog.cleancoder.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html

24.	Jak zbadać czy klasa narusza S
  https://blog.cleancoder.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html
		"However, as you think about this principle, remember that the reasons for change are people. 
		It is people who request changes. And you don’t want to confuse those people, or yourself,
		by mixing together the code that many different people care about for different reasons."
		
25.	Czym się różni Spy od Mock
		Spy zachowuje logikę udawanej klasy, Mock nie. Używając Spy stubujemy
		tylko niektóre metody z klasy. Spyów sie podobno już nie używa za bardzo.

26.	Jeżeli metoda nic nie zwraca to jak ją obsłużyć w testach?
		1.Możemy użyć Mockito verify żeby sprawdzić czy i ile razy została wywołana
						verify(createdMock).foo(); // czy w ogóle sie wywoła?
						verify(createdMock, atLeast(2)).foo(); // czy się wywoła conajmniej 2 razy
				Składnia BDD
						then(createdMock).should().foo();
		2.Możemy użyć Argument Captors żeby sprawdzić dokładnie jakie argumenty
				zostały przekazane metodzie
						-	Składnia:
								ArgumentCaptor<Foo> argumentCaptor = ArgumentCaptor.forClass(Foo.class);

						-	Przechwytywanie parametrów odbywa się w czasie verify

						-	W kodzie verify (albo then) używany wtedy zamiast argumentu
							stworzony przez nas argumentCaptor.
								verify(Bar).barFoo(argumentCaptor.capture());
								// lub 
								then(Bar).should().barFoo(argumentCaptor.capture());

						-	Dzięki temu mamy w zmiennej argumentCaptor przechwycone to co przekazaliśmy w argumencie metody.
							Mozemy się tym teraz posługiwać używając argumentCaptor.getValue() żeby wyciągnąć obiekt z captora, np:
									//argumetnCaptor.getValue() zwraca obiekt włącznie z logiką w nim
									assertThat(argumentCaptor.getValue().bar(), is(euqalTo(5)));

						-	Jeżeli metoda przyjmuje więcej niż jeden argument to dla każdego musimy utworzyć oddzielny captor

27.	Jak sprawdzić czy metoda która nic nie zwraca została wywołana w teście?
				Możemy użyć Mockito verify żeby sprawdzić czy i ile razy została wywołana
						verify(createdMock).foo(); // czy w ogóle sie wywoła?
						verify(createdMock, atLeast(2)).foo(); // czy się wywoła conajmniej 2 razy
				Składnia BDD
						then(createdMock).should().foo();

28.	Dlaczego JIT Compiler JVM nazywa się HotSpot
	Bo cały czas analizuje kod programu szukając `hot spotów` czyli fragmentów kodu
	wykonywanych często lub powtarzających się i te elementy `just-in-time` kompiluje
	do kodu maszynowego.

29.	Aspect Oriented Programming w Springu
		>> AOPNotatki
30.	Czy w Javie występuje polimortizm pól
	Nie, pola są chowane, metody overridowane
	

======================

wewnertzna klasa anonimiowa ile interfejsów ile dziedziczenia 
final finally
jakie obiekty zbiera GC
co się stanie jak dodamy takei same obiekty do HashSetu
podać kolekcję która ma indeksowany dostęp i zmienny rozmiar
jak zrobić klasę immutable

1.		SOAP vs REST
2.		sync vs async
3.		Czy REST może przyjmować xml
4.		Czy REST może byc asnync
5.		Domyślny scope beanów springowych
6.		maven lifecycle
7.		mvn verify vs mvn install
8.		Zalety i wady streamów
9.		event-driven architecture
10.	Optymalizacja SQL - joinowanie z mniejszej tabeli do większej
11.	Wyniki z dwóch tabel bez JOIN
12.	Czy mogę umieścić @GeneratedValue nad każdym polem?
13.	Garbage Collector, algorytm G1
14.	Dirty Checking
15.	Używanie zewnętrznych JARów - mvn albo ręcznie
16.	Profile mavenowe do czego się używa
17. Liskov substitution principle
18. Single responsibility principle
19. Wrzucanie stringa do String poola
20. Rodzaje transakcji w bazie danych
